@import "../../../styles/breakpoints";
@import "../../../styles/mixins";

$min-clamp: 0.6;
$max-clamp: 1;
$base-container-width-factor: 800;
$base-height: 180px;
$small-factor: 0.6;
$large-factor: 1.4;
$xl-factor: 1.8;

@mixin random-width-for-ratio($min, $max) {
  $random-addition: random($max - $min);

  $scale-factor: clamp(
    #{$min-clamp},
    var(--container-width) / #{$base-container-width-factor},
    #{$max-clamp}
  );

  // Optional modifiers
  &.small {
    width: calc((#{$random-addition + $min}px) * #{$scale-factor} * #{$small-factor}) !important;
    height: calc(#{$base-height} * #{$scale-factor} * #{$small-factor}) !important;
  }

  &.medium {
    width: calc((#{$random-addition + $min}px) * #{$scale-factor});
    height: calc(#{$base-height} * #{$scale-factor});
  }

  &.large {
    width: calc((#{$random-addition + $min}px) * #{$scale-factor} * #{$large-factor}) !important;
    height: calc(#{$base-height} * #{$scale-factor} * #{$large-factor}) !important;
  }

  &.xl {
    @media (min-width: $md-min) {
      min-width: 25%;
      width: calc((#{$random-addition + $min}px) * #{$scale-factor} * #{$xl-factor}) !important;
      height: calc(#{$base-height} * #{$scale-factor} * #{$xl-factor}) !important;
    }

    @media (max-width: $sm-max) {
      width: 100% !important;
      height: auto !important;
    }
  }

  // Default behavior (same as medium)
  width: calc((#{$random-addition + $min}px) * #{$scale-factor});
  height: calc(#{$base-height} * #{$scale-factor});
}

.masonry-container {
  width: 100%;
  contain: paint layout;
  transform: translateZ(0);
  opacity: 0;
  transition: opacity 0.2s ease;

  &.ready {
    opacity: 1;
  }

  &.small {
    @include flex-gap(row, calc(
      var(--gutter) * clamp(#{$min-clamp}, var(--container-width) / #{$base-container-width-factor}, #{$max-clamp}) * #{$small-factor}
    ));
  }

  &.medium {
    @include flex-gap(row, calc(
      var(--gutter) * clamp(#{$min-clamp}, var(--container-width) / #{$base-container-width-factor}, #{$max-clamp})
    ));
  }

  &.large {
    @include flex-gap(row, calc(
      var(--gutter) * clamp(#{$min-clamp}, var(--container-width) / #{$base-container-width-factor}, #{$max-clamp}) * #{$large-factor}
    ));
  }

  &.xl {
    @include flex-gap(row, calc(
      var(--gutter) * clamp(#{$min-clamp}, var(--container-width) / #{$base-container-width-factor}, #{$max-clamp}) * #{$large-factor}
    ));
  }

  // Default (same as medium)
  @include flex-gap(row, calc(
    var(--gutter) * clamp(#{$min-clamp}, var(--container-width) / #{$base-container-width-factor}, #{$max-clamp})
  ));
}

.masonry-item {
  flex: 1 0 auto;

  @for $i from 1 through 12 {
    &:nth-child(12n + #{$i}) {
      &.aspect-narrow {
        @include random-width-for-ratio(100, 150);
      }

      &.aspect-square {
        @include random-width-for-ratio(150, 200);
      }

      &.aspect-wide {
        @include random-width-for-ratio(200, 250);
      }

      &.aspect-panoramic {
        @include random-width-for-ratio(250, 350);
      }
    }
  }

  .masonry-content {
    height: 100%;

    ::ng-deep {
      .image-container {
        height: 100%;

        img {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
      }
    }
  }
}

.masonry-spacer {
  flex: 999999 0 0; // Very high flex-grow to ensure it takes remaining space
  height: 0; // Takes no vertical space
  margin-top: 0;
  margin-bottom: 0;
}
