@import "../../../../styles/breakpoints";

$header-height: 63px;

:host {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100vw;
  height: 100vh;
  z-index: 1040;
  background-color: black;
  justify-content: center;
  align-items: center;
  opacity: 0;
  transition: opacity .2s ease;
  pointer-events: none;

  // For swipe-down gesture
  will-change: transform, opacity;
  transform: translateY(0) scale(1);

  &.show {
    opacity: 1;
    pointer-events: all;
  }

  @supports (height: 100dvh) {
    height: 100dvh;
  }

  .image-zoom {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
    position: relative;

    ::ng-deep {
      .ngxImageZoomContainer {
        text-align: center;

        .ngxImageZoomThumbnail {
          max-width: 100vw;
          max-height: 100vh;
          object-fit: contain;
          cursor: zoom-in;

          @supports (max-height: 100dvh) {
            max-height: 100dvh;
          }
        }

        .ngxImageZoomFullContainer {
          border-color: var(--white);
        }
      }
    }

    &.zooming-enabled.lens-enabled {
      &:not(.zoom-frozen) {
        ::ng-deep {
          .ngxImageZoomContainer {
            .ngxImageZoomThumbnail {
              cursor: none;
            }
          }
        }
      }

      &.zoom-frozen {
        ::ng-deep {
          .ngxImageZoomContainer {
            .ngxImageZoomThumbnail {
              cursor: default !important; /* Show 'default' cursor for the full image when frozen */
            }
          }
        }
      }
    }

    &:not(.lens-enabled) {
      ::ng-deep {
        .ngxImageZoomContainer {
          display: flex;
          justify-content: center;
          align-items: center;
          overflow: visible;

          .ngxImageZoomThumbnail {
            max-width: 100vw;
            max-height: 100vh;

            @supports (max-height: 100dvh) {
              max-height: 100dvh;
            }
          }

          .ngxImageZoomFullContainer {
            border-radius: 0 !important;
            pointer-events: auto;
            cursor: all-scroll;
            overflow: visible;
            user-select: none;
          }
        }
      }
    }

    &.zooming-enabled:not(.lens-enabled) {
      ::ng-deep {
        .ngxImageZoomThumbnail {
          visibility: hidden;
        }
      }

      &.zoom-frozen {
        ::ng-deep {
          .ngxImageZoomFullContainer {
            cursor: default !important; /* Show 'default' cursor for the full image when frozen */
          }
        }
      }
    }
  }

  .image-zoom-indicator {
    position: absolute;
    top: 1.1rem;
    left: 3.5rem;
    box-shadow: 0 0 .5rem rgba(0, 0, 0, .5);
    background: rgba(0, 0, 0, .5);
    border-radius: 1rem;
    padding: .25rem .5rem;
    font-size: .9rem;
    transition: background .2s ease-in-out;

    a {
      color: var(--white);
    }

    &.beyond-one {
      background: rgba(255, 0, 0, .5);
    }

    &.frozen {
      background: rgba(0, 100, 200, .7);
    }
  }

  .instruction-container {
    position: absolute;
    bottom: .5rem;
    left: 50%;
    transform: translateX(-50%);
    z-index: 1;

    .instructions {
      background: rgba(0, 0, 0, .5);
      padding: .5rem 1rem;
      border-radius: 1rem;
      border: 1px solid rgba(255, 255, 255, .05);
      box-shadow: 0 0 .5rem rgba(0, 0, 0, .5);
      font-size: .9rem;
      cursor: default;
      animation: tinyBounce 1s 3;

      .ng-fa-icon {
        margin-right: .5rem;
      }
    }
  }

  .loading-indicator-container {
    position: absolute;
    bottom: .5rem;
    left: 50%;
    transform: translateX(-50%);
    text-align: center;

    &.has-message {
      background-color: rgba(0, 0, 0, .5);
      padding: 1rem;
      border-radius: 1rem;
    }
  }

  .touch .loading-indicator-container {
    top: 50%;
    bottom: unset;
    transform: translate(-50%, -50%);
  }

  .touch-device {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;

    .touch-real-container {
      width: 100%;
      height: 100%;
      touch-action: none;
      overflow: hidden;
      position: relative;

      .loading {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
      }
    }

    .gif-container {
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;

      .gif-image {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
      }
    }

    .touch-zoom-indicator {
      position: absolute;
      top: 1.15rem;
      left: 3.5rem;
      background: rgba(0, 0, 0, 0.5);
      color: white;
      padding: 0.25rem 0.75rem;
      border-radius: 1rem;
      font-size: 0.875rem;
      z-index: 1000;

      &.beyond-one {
        background: rgba(255, 0, 0, .5);
      }
    }

    img {
      max-width: 100vw;
      max-height: 100vh;
      object-fit: contain;

      @supports (max-height: 100dvh) {
        max-height: 100dvh;
      }
    }
  }

  .hd-image {
    max-width: 100vw;
    max-height: 100vh;
    object-fit: contain;

    @supports (max-height: 100dvh) {
      max-height: 100dvh;
    }
  }

  .zoom-modes,
  .close {
    cursor: pointer;
    position: absolute;
    top: 1rem;
    border-radius: 1rem;
    padding: .25rem .5rem;
    color: var(--white);
    z-index: 5;
  }

  .close {
    background: rgba(0, 0, 0, .5);
    box-shadow: 0 0 .5rem rgba(0, 0, 0, .5);

    @media (hover: hover) and (pointer: fine) {
      &:hover {
        opacity: 1;
      }
    }
  }

  .zoom-modes {
    right: .75rem;
    transform: scale(.9);

    .kebab-menu-container {
      position: relative;

      .kebab-button {
        background-color: var(--accentColor);
        border: none;
        color: var(--brightWhite);
        font-size: 1.2rem;
        cursor: pointer;
        width: 2.5rem;
        height: 2.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.5);

        &:hover {
          background-color: var(--accentColorHover, var(--accentColor));
          box-shadow: 0 3px 8px rgba(0, 0, 0, 0.7);
        }
      }

      .kebab-dropdown {
        position: absolute;
        top: 100%;
        right: 0;
        background-color: rgba(0, 0, 0, 0.9);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 4px;
        min-width: 200px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
        padding: 0.5rem 0;
        z-index: 1050;
        opacity: 0;
        visibility: hidden;
        margin-top: 0.5rem;
        transition: opacity 0.2s ease, visibility 0.2s ease, transform 0.2s ease;
        transform: translateY(-10px);
        pointer-events: none;

        &.show {
          opacity: 1;
          visibility: visible;
          transform: translateY(0);
          pointer-events: auto;
        }

        .kebab-menu-item {
          padding: 0.5rem 1rem;
          cursor: pointer;
          white-space: nowrap;
          display: flex;
          align-items: center;

          .ng-fa-icon {
            width: 20px;
            display: flex;
            justify-content: center;
            margin-right: 0.75rem;
          }

          span {
            flex: 1;
          }

          &:hover {
            background-color: rgba(255, 255, 255, 0.1);
          }

          &.disabled {
            opacity: 0.5;
            cursor: not-allowed;
            text-decoration: line-through;
          }

          &.active {
            background: rgba(0, 150, 0, 0.5);
          }
        }

        .dropdown-divider {
          height: 0;
          margin: 0.5rem 0;
          overflow: hidden;
          border-top: 1px solid rgba(255, 255, 255, 0.15);
        }
      }
    }
  }

  .astrobin-logo {
    position: absolute;
    top: 1rem;
    left: 50%;
    transform: translateX(-50%);
    opacity: .5;

    img {
      height: 2rem;
    }
  }

  .coordinates-wrapper {
    position: absolute;
    bottom: .5rem;
    right: 1rem;
    z-index: 5;
    pointer-events: none;
  }

  .keyboard-shortcuts-overlay {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background-color: rgba(0, 0, 0, 0.85);
    border-radius: 6px;
    border: 1px solid rgba(255, 255, 255, 0.15);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.35);
    padding: 0.5rem;
    z-index: 1050;
    pointer-events: all;
    min-width: 240px;
    max-width: 300px;

    .shortcuts-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding-bottom: 0.25rem;
      border-bottom: 1px solid rgba(255, 255, 255, 0.15);
      margin-bottom: 0.5rem;
      font-size: 0.9rem;

      .btn-close-shortcuts {
        background: transparent;
        border: none;
        color: rgba(255, 255, 255, 0.7);
        font-size: 0.8rem;
        padding: 0;
        cursor: pointer;

        &:hover {
          color: white;
        }
      }
    }

    .shortcuts-list {
      list-style-type: none;
      margin: 0;
      padding: 0;
      font-size: 0.85rem;
      white-space: nowrap;

      li {
        display: flex;
        align-items: center;
        margin-bottom: 0.25rem;

        &:last-child {
          margin-bottom: 0;
        }

        kbd {
          background-color: rgba(255, 255, 255, 0.15);
          border-radius: 3px;
          border: 1px solid rgba(255, 255, 255, 0.3);
          box-shadow: 0 1px 0 rgba(255, 255, 255, 0.1);
          color: white;
          display: inline-block;
          font-family: monospace;
          font-size: 0.75rem;
          font-weight: bold;
          line-height: 1;
          padding: 3px 5px;
          margin-right: 8px;
          min-width: 24px;
          text-align: center;
        }

        span {
          color: rgba(255, 255, 255, 0.9);
        }
      }
    }
  }

  .measuring-tool-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 5;

    .measure-click-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 1; /* Lowest z-index to allow buttons to be clicked */
      pointer-events: all;
      cursor: crosshair;
    }

    .measure-marker {
      position: absolute;
      width: 14px;
      height: 14px;
      transform: translate(-50%, -50%);
      z-index: 2;

      .marker-dot {
        position: absolute;
        width: 8px;
        height: 8px;
        background-color: #fff;
        border: 1px solid #000;
        border-radius: 50%;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
      }
      
      .marker-coordinates {
        position: absolute;
        left: 10px;
        top: -5px;
        white-space: nowrap;
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 2px 4px;
        border-radius: 3px;
        font-size: 0.7rem;
        pointer-events: none;
        max-width: 170px;
        overflow: hidden;
        text-overflow: ellipsis;
        z-index: 9999;
        opacity: 0; // Hide by default
        transition: opacity 0.2s ease;
        
        &.visible {
          opacity: 1; // Show when has coordinates
        }
        
        &.marker-debug {
          background-color: rgba(255, 0, 0, 0.7);
        }
      }

      &.start-marker .marker-dot {
        background-color: #4a90e2; // Blue for start point
      }

      &.end-marker .marker-dot {
        background-color: #e24a4a; // Red for end point
      }
    }

    .measure-line-container {
      position: absolute;
      top: 0;
      left: 0;
      z-index: 1;

      .measure-line {
        stroke-width: 1px;

        &.measuring {
          stroke: rgba(255, 255, 255, 0.6);
          stroke-dasharray: 4 2;
        }

        &.current-line {
          stroke: rgba(50, 150, 50, 0.8);
          stroke-width: 2px;
        }

        &.previous-line {
          stroke: rgba(200, 200, 200, 0.6);
          stroke-width: 1px;
        }
      }

      .measure-point {
        &.previous-point {
          fill: rgba(200, 200, 200, 0.8);
          stroke: rgba(0, 0, 0, 0.5);
          stroke-width: 1px;
        }
      }
    }

    .measure-distance {
      position: absolute;
      transform: translate(-50%, -50%);
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 0.9rem;
      white-space: nowrap;
      z-index: 10; /* Higher z-index to ensure labels and their delete buttons are clickable */
      pointer-events: all;

      &.current-measurement {
        background-color: rgba(50, 150, 50, 0.8);
        color: white;
        font-weight: bold;
        border: 1px solid rgba(255, 255, 255, 0.4);
        display: flex;
        flex-direction: column;
        align-items: center;

        .measurement-note {
          font-size: 0.65rem;
          font-weight: normal;
          opacity: 0.9;
          margin-top: 2px;
          color: #ffffcc;
          display: block;
        }
      }

      &.previous-measurement {
        background-color: rgba(0, 0, 0, 0.7);
        color: rgba(255, 255, 255, 0.9);
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        justify-content: center;
        max-width: 150px;

        .measurement-text {
          margin-right: 6px;
        }

        .measurement-note {
          width: 100%;
          text-align: center;
          margin-top: 2px;
          font-size: 0.65rem;
          opacity: 0.7;
          color: #ffcc00;
          text-wrap: auto;
        }

        .btn-delete-measurement {
          background: none;
          border: none;
          color: rgba(255, 100, 100, 0.7);
          padding: 0;
          width: 16px;
          height: 16px;
          font-size: 12px;
          line-height: 1;
          cursor: pointer;

          &:hover {
            color: rgba(255, 100, 100, 1);
          }
        }
      }
    }

    .measuring-instructions {
      position: absolute;
      top: 5rem;
      left: 50%;
      transform: translateX(-50%);
      background-color: rgba(0, 0, 0, 0.7);
      color: white;
      padding: 8px 16px;
      border-radius: 4px;
      font-size: 0.9rem;
      z-index: 3;
      text-align: center;
    }

    .measuring-controls {
      position: absolute;
      top: 0.5rem;
      left: 0.5rem;
      z-index: 10; /* Higher z-index to ensure buttons are clickable */
      pointer-events: all;
      display: flex;
    }

    .measuring-controls-right {
      display: flex;
      pointer-events: all;
      z-index: 10; /* Higher z-index to ensure buttons are clickable */
    }
  }

  .crosshair-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    pointer-events: none;
    z-index: 4;
    overflow: visible;

    @supports (width: 100dvw) {
      width: 100dvw;
      height: 100dvh;
    }

    .crosshair-h, .crosshair-v {
      position: fixed;
      background-color: transparent;
    }

    .crosshair-h {
      height: 0;
      width: 100%;
      left: 0;
      right: 0;
      border-top: 1px solid rgba(255, 255, 255, 0.2);
      border-bottom: 1px solid rgba(0, 0, 0, 0.2);
      transform: translateY(-50%);
    }

    .crosshair-v {
      width: 0;
      height: 100%;
      top: 0;
      bottom: 0;
      border-left: 1px solid rgba(255, 255, 255, 0.2);
      border-right: 1px solid rgba(0, 0, 0, 0.2);
      transform: translateX(-50%);
    }
  }

  .close {
    left: 1rem;
  }

  &.disable-zoom {
    touch-action: none;
  }
  
  &.measuring-mode {
    cursor: crosshair !important;
  }

  /* Add styling for measuring mode */
  ::ng-deep img.measuring-mode {
    cursor: crosshair !important;
  }

  &.standalone {
    height: calc(100vh - #{$header-height});

    @supports (height: 100dvh) {
      height: calc(100dvh - #{$header-height});
    }

    .image-zoom {
      ::ng-deep {
        .ngxImageZoomContainer {
          .ngxImageZoomThumbnail {
            max-height: calc(100vh - #{$header-height});
            object-fit: contain;

            @supports (max-height: 100dvh) {
              max-height: calc(100dvh - #{$header-height});
            }
          }
        }
      }

      &:not(.lens-enabled) {
        ::ng-deep {
          .ngxImageZoomContainer {
            height: calc(100vh - #{$header-height}) !important;

            @supports (height: 100dvh) {
              height: calc(100dvh - #{$header-height}) !important;
            }

            .ngxImageZoomThumbnail {
              max-height: calc(100vh - #{$header-height});

              @supports (max-height: 100dvh) {
                max-height: calc(100dvh - #{$header-height});
              }
            }

            .ngxImageZoomFullContainer {
              height: calc(100vh - #{$header-height}) !important;

              @supports (height: 100dvh) {
                height: calc(100dvh - #{$header-height}) !important;
              }
            }
          }
        }
      }
    }

    .hd-image {
      max-height: calc(100vh - #{$header-height});

      @supports (max-height: 100dvh) {
        max-height: calc(100dvh - #{$header-height});
      }
    }

    .astrobin-logo {
      display: none;
    }
  }
}

/* Coordinate labels for measurements */
.measure-coord-label {
  position: absolute;
  white-space: nowrap;
  background-color: rgba(0, 0, 0, 0.7);
  color: white;
  padding: 2px 4px;
  border-radius: 3px;
  font-size: 0.7rem;
  pointer-events: none;
  max-width: 170px;
  overflow: hidden;
  text-overflow: ellipsis;
  z-index: 9;
}
