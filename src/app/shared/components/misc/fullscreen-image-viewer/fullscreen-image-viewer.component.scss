@import "../../../../styles/breakpoints";
@import "../../../../styles/mixins";

$header-height: 63px;

// Define the animations for swipe gestures
@keyframes return-to-normal {
  0% {
    // Start from the current state - animation will use the current computed style
  }
  99% {
    // Almost at the end - ensure we keep pointer-events disabled
    pointer-events: none;
  }
  100% {
    transform: translateY(0) scale(1);
    opacity: 1;
    pointer-events: all; // Re-enable interaction
    will-change: auto; // Reset will-change to free up resources
  }
}

@keyframes swipe-to-close {
  0% {
    // Start from the current state - animation will use the current computed style
  }
  99% {
    // Almost at the end - ensure we keep pointer-events disabled
    pointer-events: none;
  }
  100% {
    transform: translateY(100%) scale(0.8);
    opacity: 0;
    pointer-events: none; // Keep disabled since we're hiding
    will-change: auto; // Reset will-change to free up resources
  }
}

:host {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100vw;
  height: 100vh;
  z-index: 1040;
  background-color: black;
  justify-content: center;
  align-items: center;
  opacity: 0;
  transition: opacity .2s ease;
  pointer-events: none;

  // For swipe-down gesture - improves performance with composite layers
  will-change: transform, opacity;
  transform: translateY(0) scale(1);
  
  // Add animation classes for swipe gestures
  &.swipe-to-close-animating {
    pointer-events: none;
    // Force GPU acceleration for smoother animations
    will-change: transform, opacity;
  }
  
  &.swipe-to-close-return-to-normal {
    animation: return-to-normal 0.3s cubic-bezier(0.215, 0.61, 0.355, 1) forwards;
    pointer-events: none; /* Disable interaction during animation */
    // Force hardware acceleration for smoother animations
    will-change: transform, opacity;
    // Remove all transitions to prevent conflicts with the animation
    transition: none !important;
  }
  
  &.swipe-to-close-animate {
    animation: swipe-to-close 0.3s cubic-bezier(0.215, 0.61, 0.355, 1) forwards;
    pointer-events: none; /* Disable interaction during animation */
    // Force hardware acceleration for smoother animations
    will-change: transform, opacity;
    // Remove all transitions to prevent conflicts with the animation
    transition: none !important;
  }

  &.show {
    opacity: 1;
    pointer-events: all;
  }

  @supports (height: 100dvh) {
    height: 100dvh;
  }

  .image-zoom {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
    position: relative;

    ::ng-deep {
      .ngxImageZoomContainer {
        text-align: center;

        .ngxImageZoomThumbnail {
          max-width: 100vw;
          max-height: 100vh;
          object-fit: contain;
          cursor: zoom-in;

          @supports (max-height: 100dvh) {
            max-height: 100dvh;
          }
        }

        .ngxImageZoomFullContainer {
          border-color: var(--white);
        }
      }
    }

    &.zooming-enabled.lens-enabled {
      &:not(.zoom-frozen) {
        ::ng-deep {
          .ngxImageZoomContainer {
            .ngxImageZoomThumbnail {
              cursor: none;
            }
          }
        }
      }

      &.zoom-frozen {
        ::ng-deep {
          .ngxImageZoomContainer {
            .ngxImageZoomThumbnail {
              cursor: default !important; /* Show 'default' cursor for the full image when frozen */
            }
          }
        }
      }
    }

    &:not(.lens-enabled) {
      ::ng-deep {
        .ngxImageZoomContainer {
          display: flex;
          justify-content: center;
          align-items: center;
          overflow: visible;

          .ngxImageZoomThumbnail {
            max-width: 100vw;
            max-height: 100vh;

            @supports (max-height: 100dvh) {
              max-height: 100dvh;
            }
          }

          .ngxImageZoomFullContainer {
            border-radius: 0 !important;
            pointer-events: auto;
            cursor: all-scroll;
            overflow: visible;
            user-select: none;
          }
        }
      }
    }

    &.zooming-enabled:not(.lens-enabled) {
      ::ng-deep {
        .ngxImageZoomThumbnail {
          visibility: hidden;
        }
      }

      &.zoom-frozen {
        ::ng-deep {
          .ngxImageZoomFullContainer {
            cursor: default !important; /* Show 'default' cursor for the full image when frozen */
          }
        }
      }
    }
  }

  .image-zoom-indicator {
    position: absolute;
    top: 1.1rem;
    left: 3.5rem;
    box-shadow: 0 0 .5rem rgba(0, 0, 0, .5);
    background: rgba(0, 0, 0, .5);
    border-radius: 1rem;
    padding: .25rem .5rem;
    font-size: .9rem;
    transition: background .2s ease-in-out;

    a {
      color: var(--white);
    }

    &.beyond-one {
      background: rgba(255, 0, 0, .5);
    }

    &.frozen {
      background: rgba(0, 100, 200, .7);
    }
  }

  .instruction-container {
    position: absolute;
    bottom: .5rem;
    left: 50%;
    transform: translateX(-50%);
    z-index: 1;

    .instructions {
      background: rgba(0, 0, 0, .5);
      padding: .5rem 1rem;
      border-radius: 1rem;
      border: 1px solid rgba(255, 255, 255, .05);
      box-shadow: 0 0 .5rem rgba(0, 0, 0, .5);
      font-size: .9rem;
      cursor: default;
      animation: tinyBounce 1s 3;

      .ng-fa-icon {
        margin-right: .5rem;
      }
    }
  }

  .loading-indicator-container {
    position: absolute;
    bottom: .5rem;
    left: 50%;
    transform: translateX(-50%);
    text-align: center;

    &.has-message {
      background-color: rgba(0, 0, 0, .5);
      padding: 1rem;
      border-radius: 1rem;
    }
  }

  .touch .loading-indicator-container {
    top: 50%;
    bottom: unset;
    transform: translate(-50%, -50%);
  }

  .touch-device {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;

    .touch-real-container {
      width: 100%;
      height: 100%;
      touch-action: none;
      overflow: hidden;
      position: relative;

      .loading {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
      }
    }

    .gif-container {
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;

      .gif-image {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
      }
    }

    .touch-zoom-indicator {
      position: absolute;
      top: 1.15rem;
      left: 3.5rem;
      background: rgba(0, 0, 0, 0.5);
      color: white;
      padding: 0.25rem 0.75rem;
      border-radius: 1rem;
      font-size: 0.875rem;
      z-index: 1000;

      &.beyond-one {
        background: rgba(255, 0, 0, .5);
      }
    }

    img {
      max-width: 100vw;
      max-height: 100vh;
      object-fit: contain;

      @supports (max-height: 100dvh) {
        max-height: 100dvh;
      }
    }
  }

  .hd-image {
    max-width: 100vw;
    max-height: 100vh;
    object-fit: contain;

    @supports (max-height: 100dvh) {
      max-height: 100dvh;
    }
  }

  .zoom-modes,
  .close {
    cursor: pointer;
    position: absolute;
    top: 1rem;
    border-radius: 1rem;
    padding: .25rem .5rem;
    color: var(--white);
    background: rgba(0, 0, 0, .5);
    box-shadow: 0 0 .5rem rgba(0, 0, 0, .5);
    opacity: .8;
  }

  .close {
    @media (hover: hover) and (pointer: fine) {
      &:hover {
        opacity: 1;
      }
    }
  }

  .zoom-modes {
    right: .75rem;
    transform: scale(.9);
    display: flex;
    @include flex-gap(row, .5rem);

    > div {
      &:first-child:not(:last-child) {
        border-right: 1px solid rgba(255, 255, 255, .25);
        padding-right: .5rem;
      }

      @media (hover: hover) and (pointer: fine) {
        &:hover {
          opacity: 1;
        }
      }
    }
  }

  .astrobin-logo {
    position: absolute;
    top: 1rem;
    left: 50%;
    transform: translateX(-50%);
    opacity: .5;

    img {
      height: 2rem;
    }
  }

  .close {
    left: 1rem;
  }

  &.disable-zoom {
    touch-action: none;
  }

  &.standalone {
    height: calc(100vh - #{$header-height});

    @supports (height: 100dvh) {
      height: calc(100dvh - #{$header-height});
    }

    .image-zoom {
      ::ng-deep {
        .ngxImageZoomContainer {
          .ngxImageZoomThumbnail {
            max-height: calc(100vh - #{$header-height});
            object-fit: contain;

            @supports (max-height: 100dvh) {
              max-height: calc(100dvh - #{$header-height});
            }
          }
        }
      }

      &:not(.lens-enabled) {
        ::ng-deep {
          .ngxImageZoomContainer {
            height: calc(100vh - #{$header-height}) !important;

            @supports (height: 100dvh) {
              height: calc(100dvh - #{$header-height}) !important;
            }

            .ngxImageZoomThumbnail {
              max-height: calc(100vh - #{$header-height});

              @supports (max-height: 100dvh) {
                max-height: calc(100dvh - #{$header-height});
              }
            }

            .ngxImageZoomFullContainer {
              height: calc(100vh - #{$header-height}) !important;

              @supports (height: 100dvh) {
                height: calc(100dvh - #{$header-height}) !important;
              }
            }
          }
        }
      }
    }

    .hd-image {
      max-height: calc(100vh - #{$header-height});

      @supports (max-height: 100dvh) {
        max-height: calc(100dvh - #{$header-height});
      }
    }

    .astrobin-logo {
      display: none;
    }
  }
}
