:host {
  display: contents;
}

.measuring-tool-container {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 5;
  
  /* Global CSS property for rotation state */
  --rotating: 'false';
  
  /* Global rotation feedback - when rotation is active, change cursor for entire container */
  &.rotation-active {
    cursor: grabbing !important;
  }

  .measure-click-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1; /* Low z-index to allow buttons and handles to be clicked */
    pointer-events: all;
    cursor: crosshair;
    
    /* Uncomment for debugging - will show the overlay area */
    /* background-color: rgba(255, 0, 0, 0.05); */
    
    /* Add this to disable pointer events over specific areas */
    &.debug-mode {
      background-color: rgba(255, 0, 0, 0.05);
    }
  }

  .measure-marker {
    position: absolute;
    width: 20px;
    height: 20px;
    transform: translate(-50%, -50%);
    z-index: 2;
    cursor: grab;
    pointer-events: all; /* Ensure it captures mouse events */
    transition: transform 0.1s ease;
    
    /* Rotation handle specific styles */
    &.rotation-handle {
      z-index: 1000; /* Very high z-index to be above all other elements */
      width: 32px;
      height: 32px;
      background-color: rgba(255, 204, 0, 0.8);
      border: 2px solid rgba(255, 255, 255, 0.7);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 0 12px rgba(0, 0, 0, 0.5);
      pointer-events: all !important;
      
      &:hover {
        background-color: rgba(255, 204, 0, 1);
        transform: translate(-50%, -50%) scale(1.15);
      }
      
      &:active, &.rotating {
        background-color: rgba(255, 220, 50, 1);
        transform: translate(-50%, -50%) scale(1.2);
        cursor: grabbing;
      }
      
      &.current {
        background-color: rgba(50, 180, 50, 0.9);
        
        &:hover {
          background-color: rgba(50, 180, 50, 1);
        }
        
        &:active, &.rotating {
          background-color: rgba(70, 200, 70, 1);
        }
      }
      
      .rotation-icon {
        color: #fff;
        font-size: 22px;
        font-weight: bold;
        text-shadow: 0 2px 3px rgba(0, 0, 0, 0.7);
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        height: 100%;
        line-height: 1;
      }
    }

    &:hover .marker-dot {
      background-color: #ffcc00;
      border: 1px solid #333;
      transform: translate(-50%, -50%) scale(1.2);
      box-shadow: 0 0 8px rgba(255, 204, 0, 0.7);
    }

    &:active {
      cursor: grabbing;

      .marker-dot {
        background-color: #ff9900;
        transform: translate(-50%, -50%) scale(1.3);
        box-shadow: 0 0 12px rgba(255, 153, 0, 0.8);
      }
    }

    &.dragging {
      cursor: grabbing;
      z-index: 10; /* Ensure dragged point stays on top */

      .marker-dot {
        background-color: #ff9900;
        transform: translate(-50%, -50%) scale(1.3);
        box-shadow: 0 0 12px rgba(255, 153, 0, 0.8);
      }
    }

    .marker-dot {
      position: absolute;
      width: 10px;
      height: 10px;
      background-color: #fff;
      border: 1px solid #000;
      border-radius: 50%;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      transition: transform 0.15s ease, background-color 0.15s ease, box-shadow 0.15s ease;
      box-shadow: 0 0 3px rgba(0, 0, 0, 0.3);
    }

    .marker-coordinates {
      position: absolute;
      // No longer using transform-based centering since we're positioning based on angle
      white-space: nowrap;
      background-color: rgba(0, 0, 0, 0.9); // Darker for better readability
      color: white;
      padding: 4px 8px; // Increased padding for better readability
      border-radius: 4px;
      font-size: 0.8rem; // Slightly larger font
      font-family: 'Consolas', 'Monaco', 'Courier New', monospace; // Fixed-width font
      pointer-events: none;
      max-width: 250px; // Increased max width
      overflow: hidden;
      text-overflow: ellipsis;
      z-index: 9999;
      opacity: 0; // Hide by default
      transition: opacity 0.2s ease;
      border: 1px solid rgba(255, 255, 255, 0.5); // More visible border
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.5); // Stronger shadow

      // Initial position for start point (before end point is placed)
      // Now handled with inline styles in the template for more reliable positioning
      &.initial-position {
        // Styles in the template override these
        z-index: 20; // Higher z-index to ensure it's above other elements
      }

      // Top position - for start point
      &.top-position {
        top: -40px; // Place higher above the marker
        left: 10px;
      }

      // Bottom position - for end point
      &.bottom-position {
        top: 25px; // Place lower below the marker
        left: 10px;
      }

      &.visible {
        opacity: 1; // Show when has coordinates
      }

      &.marker-debug {
        background-color: rgba(255, 0, 0, 0.7);
      }
    }

    &.start-marker .marker-dot {
      background-color: #4a90e2; // Blue for start point

      &::after {
        content: "";
        position: absolute;
        width: 100%;
        height: 100%;
        border-radius: 50%;
        border: 1px solid rgba(255, 255, 255, 0.5);
        top: 0;
        left: 0;
        animation: pulse 2s infinite;
      }
    }

    &.end-marker .marker-dot {
      background-color: #e24a4a; // Red for end point

      &::after {
        content: "";
        position: absolute;
        width: 100%;
        height: 100%;
        border-radius: 50%;
        border: 1px solid rgba(255, 255, 255, 0.5);
        top: 0;
        left: 0;
        animation: pulse 2s infinite;
        animation-delay: 1s;
      }
    }

    &.previous-start-marker {
      z-index: 3; // Higher z-index than SVG lines

      .marker-dot {
        background-color: #4a90e2; // Blue for start point
        width: 8px;
        height: 8px;
        opacity: 0.8;

        &::after {
          content: "";
          position: absolute;
          width: 100%;
          height: 100%;
          border-radius: 50%;
          border: 1px solid rgba(255, 255, 255, 0.5);
          top: 0;
          left: 0;
          animation: pulse 2s infinite;
          animation-delay: 0.5s;
        }
      }

      &:hover .marker-dot {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1.3);
      }
    }

    &.previous-end-marker {
      z-index: 3; // Higher z-index than SVG lines

      .marker-dot {
        background-color: #e24a4a; // Red for end point
        width: 8px;
        height: 8px;
        opacity: 0.8;

        &::after {
          content: "";
          position: absolute;
          width: 100%;
          height: 100%;
          border-radius: 50%;
          border: 1px solid rgba(255, 255, 255, 0.5);
          top: 0;
          left: 0;
          animation: pulse 2s infinite;
          animation-delay: 1.5s;
        }
      }

      &:hover .marker-dot {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1.3);
      }
    }

    &.dragging {
      z-index: 10 !important;
    }

    @keyframes pulse {
      0% {
        transform: scale(1);
        opacity: 0.7;
      }
      70% {
        transform: scale(2);
        opacity: 0;
      }
      100% {
        transform: scale(2.5);
        opacity: 0;
      }
    }
  }

  .measure-line-container, .measure-shape-container {
    position: absolute;
    top: 0;
    left: 0;
    z-index: 1;
    pointer-events: none;

    .measure-line {
      stroke-width: 1px;

      &.measuring {
        stroke: rgba(255, 255, 255, 0.6);
        stroke-dasharray: 4 2;
      }

      &.current-line {
        stroke: rgba(50, 150, 50, 0.8);
        stroke-width: 2px;
      }

      &.previous-line {
        stroke: rgba(200, 200, 200, 0.6);
        stroke-width: 1px;
      }
    }

    .measure-point {
      &.previous-point {
        fill: rgba(200, 200, 200, 0.8);
        stroke: rgba(0, 0, 0, 0.5);
        stroke-width: 1px;
      }

      &.original-position {
        fill: rgba(255, 255, 255, 0.3);
        stroke: rgba(255, 255, 255, 0.6);
        stroke-width: 1px;
        stroke-dasharray: 2 2;
      }
    }

    .measure-line {
      &.drag-indicator {
        stroke: rgba(255, 255, 255, 0.5);
        stroke-width: 1px;
        stroke-dasharray: 3 3;
      }
    }

    .measure-shape {
      &.circle, &.rectangle {
        fill: none;
        stroke-width: 1.5px;
        stroke-dasharray: 5 3;
        pointer-events: none; /* Disable interactions with the shape so clicks pass through */
        transition: stroke-width 0.2s ease, stroke 0.2s ease;
        
        &:hover {
          stroke-width: 2.5px; /* Thicker stroke on hover for better visibility */
          stroke-dasharray: 4 2; /* Tighter dash pattern on hover for better visibility */
        }

        &.current {
          stroke: rgba(50, 150, 50, 0.8);
        }
      }

      &.circle {
        stroke: rgba(100, 150, 255, 0.7);
      }

      &.rectangle {
        stroke: rgba(255, 180, 50, 0.7);
        
        &.rotating {
          stroke: rgba(255, 220, 50, 1);
          stroke-width: 2px;
          stroke-dasharray: 4 2;
          cursor: move; /* Fallback cursor */
          cursor: grabbing; /* Modern better cursor */
        }
      }
      
      /* Rotation handle styling */
      .rotation-master-handle {
        /* Override SVG rules for the master handle */
        pointer-events: all !important;
        cursor: grab !important;
        z-index: 1000 !important;
        touch-action: none !important; /* Disable default touch actions */
      }
      
      .rotate-handle {
        pointer-events: all !important; /* Force enable interactions with the handle */
        z-index: 1000 !important; /* Ensure the handle is above all other elements, including the overlay */
        touch-action: none !important; /* Disable default touch actions */
        
        .rotate-handle-bg {
          cursor: grab;
          fill: rgba(255, 255, 0, 0.9); /* More visible yellow color */
          stroke: rgba(0, 0, 0, 0.7);
          stroke-width: 2px;
          transition: all 0.1s ease-out; /* Quick transitions for better feedback */
          pointer-events: all !important; /* Force ensure it's clickable */
          box-shadow: 0 0 8px rgba(255, 255, 255, 0.5), 0 0 4px rgba(0, 0, 0, 0.5);
          filter: drop-shadow(0 0 3px rgba(255, 220, 0, 0.5));
          
          &:hover {
            fill: rgba(255, 255, 255, 1);
            stroke: rgba(0, 0, 0, 0.8);
            stroke-width: 2px;
            box-shadow: 0 0 8px rgba(0, 0, 0, 0.5);
          }
          
          &:active {
            cursor: grabbing;
            fill: rgba(255, 255, 255, 1);
            box-shadow: 0 0 12px rgba(0, 0, 0, 0.6);
          }
          
          &.rotating {
            cursor: grabbing !important;
            fill: rgba(255, 255, 100, 1);
            box-shadow: 0 0 12px rgba(255, 220, 0, 0.6);
            transform: scale(1.2); /* Visual feedback that it's active */
            transition: transform 0.1s ease-out;
          }
          
          &.current {
            fill: rgba(50, 180, 50, 0.85);
            box-shadow: 0 0 8px rgba(50, 180, 50, 0.4);
            
            &:hover {
              fill: rgba(50, 180, 50, 1);
              stroke: rgba(0, 0, 0, 0.8);
              box-shadow: 0 0 12px rgba(50, 180, 50, 0.6);
            }
          }
        }
        
        .rotate-handle-icon {
          pointer-events: all !important;
          cursor: grab;
          z-index: 1001 !important; /* Even higher z-index */
          
          &:active, &.rotating {
            cursor: grabbing;
          }
          
          path {
            stroke: rgba(0, 0, 0, 0.8);
            stroke-width: 2px;
            fill: none;
            transition: stroke 0.2s ease, stroke-width 0.2s ease;
          }
          
          &.rotating path {
            stroke: rgba(255, 220, 0, 1);
            stroke-width: 3px;
            animation: rotate-icon 1.5s infinite linear;
          }
          
          @keyframes rotate-icon {
            0% {
              transform: rotate(0deg);
            }
            100% {
              transform: rotate(360deg);
            }
          }
          
          &.current path {
            stroke: rgba(255, 255, 255, 0.9);
            stroke-width: 2px;
          }
          
          &.current.rotating path {
            stroke: rgba(50, 255, 50, 1);
            stroke-width: 3px;
          }
        }
      }
    }

    .shape-overlay {
      fill: rgba(0, 0, 0, 0.2);
      pointer-events: none;
      transition: fill 0.2s ease;
    }
    
    /* Brighten the overlay slightly when dragging to provide feedback */
    .isDragging .shape-overlay {
      fill: rgba(0, 0, 0, 0.15);
    }

    /* Dimension labels for rectangles */
    .dimension-line {
      stroke: rgba(255, 255, 255, 0.8);
      stroke-width: 1.5px;
      stroke-dasharray: 3 2;

      &.current {
        stroke: rgba(255, 255, 255, 1);
      }
    }

    .dimension-arrow {
      stroke: rgba(255, 255, 255, 0.8);
      stroke-width: 1.5px;

      &.current {
        stroke: rgba(255, 255, 255, 1);
      }
    }

    .dimension-text {
      fill: rgba(255, 255, 255, 1);
      font-size: 12px;
      font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
      text-shadow: 0 0 4px rgba(0, 0, 0, 1);
      paint-order: stroke;
      stroke: rgba(0, 0, 0, 0.5);
      stroke-width: 1px;

      .unit-symbol {
        font-size: 0.85em;
        position: relative;
        top: -0.4em;
        font-weight: normal;
      }

      &.current {
        fill: rgba(255, 255, 255, 1);
        font-weight: bold;
      }
    }
  }

  .measure-distance {
    position: absolute;
    transform: translate(-50%, -50%);
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 0.9rem;
    font-family: 'Consolas', 'Monaco', 'Courier New', monospace; /* Fixed-width font */
    white-space: nowrap;
    z-index: 10; /* Higher z-index to ensure labels and their delete buttons are clickable */
    pointer-events: all;

    .unit-symbol {
      font-size: 0.85em;
      position: relative;
      top: -0.4em;
      font-weight: normal;
    }

    &.current-measurement {
      background-color: rgba(50, 150, 50, 0.8);
      color: white;
      font-weight: bold;
      border: 1px solid rgba(255, 255, 255, 0.4);
      display: flex;
      flex-direction: row;
      flex-wrap: nowrap;
      white-space: nowrap;
      align-items: center;
      cursor: grab;
      
      &:hover {
        background-color: rgba(60, 170, 60, 0.9);
      }
      
      &:active {
        cursor: grabbing;
      }
    }

    /* External measurement note container */
    & + .measurement-note-container {
      position: absolute;
      transform: translate(-50%, 0);
      top: 100%;
      left: 50%;
      margin-top: 4px;
      text-align: center;
      pointer-events: none;

      .measurement-note {
        font-size: 0.65rem;
        font-weight: normal;
        opacity: 0.9;
        color: #ffffcc;
        display: block;
        background-color: rgba(0, 0, 0, 0.7);
        padding: 2px 6px;
        border-radius: 3px;
      }
    }

    &.previous-measurement {
      background-color: rgba(0, 0, 0, 0.7);
      color: rgba(255, 255, 255, 0.9);
      display: flex;
      flex-wrap: nowrap;
      align-items: center;
      justify-content: center;
      max-width: none;
      white-space: nowrap;
      cursor: grab;
      
      &:hover {
        background-color: rgba(30, 30, 30, 0.85);
      }
      
      &:active {
        cursor: grabbing;
      }

      .measurement-text {
        margin-right: 6px;
      }

      .measurement-actions {
        display: flex;
        align-items: center;
        margin-left: 4px;

        .btn-shape-action,
        .btn-delete-measurement {
          background: none;
          border: none;
          padding: 2px;
          width: 24px; // Slightly larger for easier clicking
          height: 24px; // Slightly larger for easier clicking
          font-size: 12px;
          line-height: 1;
          cursor: pointer;
          border-radius: 3px;
          opacity: 0.7;
          transition: all 0.15s ease;
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 15; // Higher z-index to ensure clicks register

          &:hover {
            opacity: 1;
            background-color: rgba(255, 255, 255, 0.2);
          }

          &.active {
            background-color: rgba(255, 255, 255, 0.3);
            opacity: 1;
          }
          
          // Add a small delay to avoid accidental double clicks
          pointer-events: all !important;
        }

        .btn-shape-action {
          color: rgba(255, 255, 255, 0.8);
          margin-right: 3px;

          &:hover {
            color: rgba(255, 255, 255, 1);
          }

          &:first-child {
            color: rgba(100, 150, 255, 0.8);

            &:hover, &.active {
              color: rgba(100, 150, 255, 1);
            }
          }

          &:nth-child(2) {
            color: rgba(255, 180, 50, 0.8);

            &:hover, &.active {
              color: rgba(255, 180, 50, 1);
            }
          }
        }

        .btn-delete-measurement {
          color: rgba(255, 100, 100, 0.7);
          z-index: 20; // Ensure delete button has higher z-index than other buttons

          &:hover {
            color: rgba(255, 100, 100, 1);
            background-color: rgba(255, 100, 100, 0.2); // Add subtle background highlight
          }
          
          &.delete-button {
            pointer-events: all !important;
          }
        }
      }
    }
  }

  .measuring-status-indicator {
    position: fixed;
    top: 1rem;
    left: 50%;
    transform: translateX(-50%);
    background-color: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 10px 15px;
    border-radius: 5px;
    z-index: 20;
    border: 1px solid rgba(255, 255, 255, 0.5);
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.5);
    pointer-events: none; // So it doesn't interfere with clicks
    text-align: center;
    max-width: 500px;
    
    .status-message {
      font-weight: bold;
      margin-bottom: 5px;
      color: #ffcc00;
    }
    
    .start-coordinates {
      font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
      font-size: 0.85rem;
    }
  }

  .measuring-controls-right {
    position: absolute;
    top: 0.5rem;
    right: 0.75rem;
    display: flex;
    pointer-events: all;
    z-index: 10; /* Higher z-index to ensure buttons are clickable */

    .btn-outline-light {
      background-color: rgba(0, 0, 0, 0.4);
      border-color: rgba(255, 255, 255, 0.6);
      font-weight: 500;
      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.8);

      &:hover {
        background-color: rgba(0, 0, 0, 0.7);
        border-color: rgba(255, 255, 255, 0.8);
      }

      &:focus, &:active {
        box-shadow: 0 0 0 0.25rem rgba(255, 255, 255, 0.25);
      }
    }
  }
}

/* Coordinate labels for measurements */
.measure-coord-label {
  position: absolute;
  white-space: nowrap;
  background-color: rgba(0, 0, 0, 0.9); // Darker for better readability
  color: white;
  padding: 4px 8px; // Increased padding for better readability
  border-radius: 4px;
  font-size: 0.8rem; // Slightly larger font
  font-family: 'Consolas', 'Monaco', 'Courier New', monospace; /* Fixed-width font */
  pointer-events: none;
  max-width: 250px; // Increased max width
  overflow: hidden;
  text-overflow: ellipsis;
  z-index: 9;
  opacity: 0; // Hide by default
  transform: translate(-50%, -50%); // Center the label on its calculated position

  &.visible {
    opacity: 1; // Show when has coordinates
  }

  border: 1px solid rgba(255, 255, 255, 0.5); // More visible border
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.5); // Stronger shadow

  /* Position is managed by our label positioning functions in the component */
}